#!/usr/bin/env ruby

require 'optparse'

options = {
  unique_headers: [],
  ignore_headers: [],
  sort_batch_size: 1_000_000
}
OptionParser.new do |opts|
  opts.banner = 'Usage: ' + File.basename(__FILE__) + ' [options] <csv file>'

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end

  opts.on('-u', '--unique HEADERS', 'Comman separated list of headers that genrate a unique key per a row, use 1st column by default') do |v|
    options[:unique_headers] = v.split(',')
  end

  opts.on('-i', '--ignore HEADERS', 'Comman separated list of headers to ignore during row comparison') do |v|
    options[:ignore_headers] = v.split(',')
  end

  opts.on('--sort-batch-size SIZE', Integer, 'Number of rows to load into memory while sorting') do |v|
    opts[:sort_batch_size] = v
  end
end.parse!

require 'csv-utils'

csv1 = CSVUtils::CSVIterator.new(ARGV[0])
csv2 = CSVUtils::CSVIterator.new(ARGV[1])

unless csv1.first.keys == csv2.first.keys
  $stderr.puts("headers do not match #{ARGV[0]} headers #{csv1.first.keys}, #{ARGV[1]} headers #{csv2.first.keys}")
  exit 1
end

unknown_unique_headers = options[:unique_headers] - csv1.first.keys
unless unknown_unique_headers.empty?
  $stderr.puts("specified unique headers are unknown #{unknown_unique_headers}")
  exit 1
end

unknown_ignore_headers = options[:ignore_headers] - csv1.first.keys
unless unknown_ignore_headers.empty?
  $stderr.puts("specified headers to ignore are unknown #{unknown_ignore_headers}")
  exit 1
end

options[:unique_headers] = [csv1.first.keys.first] if options[:unique_headers].empty?

puts "uniqueness header(s) are #{options[:unique_headers].join(', ')}"

unique_header_indexes = []
csv1.first.keys.each_with_index do |header, idx|
  unique_header_indexes << idx if options[:unique_headers].include?(header)
end

sort_compare_proc = proc do |csv1_row, csv2_row|
  result = 0
  unique_header_indexes.each do |idx|
    result = csv1_row[idx] <=> csv2_row[idx]
    break unless result == 0
  end

  if result == 0
    csv1_row.each_with_index do |csv1_col, idx|
      csv2_col = csv2_row[idx]
      result = csv1_col <=> csv2_col
      break unless result == 0
    end
  end

  result
end

csv1_sorted_file_name = ARGV[0] + '.sorted'
csv2_sorted_file_name = ARGV[1] + '.sorted'

puts "sorting #{ARGV[0]}"
sorter = CSVUtils::CSVSort.new(ARGV[0], csv1_sorted_file_name)
sorter.sort(options[:sort_batch_size], &sort_compare_proc)

puts "sorting #{ARGV[1]}"
sorter = CSVUtils::CSVSort.new(ARGV[1], csv2_sorted_file_name)
sorter.sort(options[:sort_batch_size], &sort_compare_proc)

options[:unique_headers] = [csv1.first.keys.first]
update_comparison_columns = csv1.first.keys - options[:unique_headers]
update_comparison_columns -= options[:ignore_headers]

comparer = CSVUtils::CSVCompare.new(csv1_sorted_file_name, update_comparison_columns) do |csv1_row, csv2_row|
  result = 0
  options[:unique_headers].each do |header|
    result = csv1_row[header] <=> csv2_row[header]
    break unless result == 0
  end

  result
end

stats = Hash.new(0)
puts "comparing #{ARGV[0]} with #{ARGV[1]}"
diff_file_name = 'diff-results-' + File.basename(ARGV[0])
CSV.open(diff_file_name, 'wb') do |out|
  out << ['Result'] + csv1.first.keys
  comparer.compare(csv2_sorted_file_name) do |action, record|
    stats[action] += 1
    out << [action] + record.values
  end
end
puts "differences found #{stats}"

File.unlink(csv1_sorted_file_name)
File.unlink(csv2_sorted_file_name)

if stats.empty?
  puts "files were identical"
  File.unlink(diff_file_name)
else
  puts "results can be found in #{diff_file_name}"
end
